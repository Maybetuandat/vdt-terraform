terraform {
  required_version = ">= 0.13"
  required_providers {
    libvirt = {
      source = "dmacvicar/libvirt"
    }
  }
}

provider "libvirt" {
  uri = "qemu:///system"
}

resource "libvirt_pool" "ubuntu" {
  name = "ubuntu3"
  type = "dir"
  path = "/tmp/terraform-provider-libvirt-pool-wordpress"
}

# We use the Ubuntu image created by Packer
resource "libvirt_volume" "ubuntu-qcow2-now" {
  name   = "wordpress-ubuntu-image"
  pool   = libvirt_pool.ubuntu.name
  source = "/home/maybetuandat/Downloads/packer-notes/docs/chap2/output-jammy/ubuntu-jammy.img"
  format = "qcow2"
}

# Create user-data for cloud-init with WordPress installation
data "template_file" "user_data" {
  template = <<-EOF
    #cloud-config
    # Set password and enable password auth
    password: test321
    ssh_pwauth: true
    chpasswd:
      expire: false
    
    # Configure SSH banner and prepare setup scripts
    write_files:
      - path: /etc/ssh_banner
        content: |
          Welcome to Application WordPress
        permissions: '0644'
      - path: /tmp/wordpress_setup.sh
        content: |
          #!/bin/bash
          
          # Update system
          apt-get update
          apt-get upgrade -y
          
          # Install LAMP stack and WordPress dependencies
          apt-get install -y apache2 mariadb-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip
          
          # Configure UFW
          apt-get install -y ufw
          ufw allow 22
          ufw allow 80
          ufw allow 443
          ufw --force enable
          
          # Configure SSH banner
          sed -i 's/#Banner.*/Banner \/etc\/ssh_banner/' /etc/ssh/sshd_config
          systemctl restart sshd
          
          # Set up MariaDB for WordPress
          mysql -u root <<MYSQL_SCRIPT
          CREATE DATABASE wordpress;
          CREATE USER 'wpuser'@'localhost' IDENTIFIED BY 'wppassword';
          GRANT ALL PRIVILEGES ON wordpress.* TO 'wpuser'@'localhost';
          FLUSH PRIVILEGES;
          MYSQL_SCRIPT
          
          # Download and configure WordPress
          wget https://wordpress.org/latest.tar.gz -P /tmp
          tar -xzf /tmp/latest.tar.gz -C /tmp
          
          # Set up Apache virtual host for WordPress
          cp -R /tmp/wordpress/* /var/www/html/
          chown -R www-data:www-data /var/www/html/
          chmod -R 755 /var/www/html/
          
          # Create WordPress config
          cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
          sed -i 's/database_name_here/wordpress/' /var/www/html/wp-config.php
          sed -i 's/username_here/wpuser/' /var/www/html/wp-config.php
          sed -i 's/password_here/wppassword/' /var/www/html/wp-config.php
          
          # Generate WordPress salts
          SALTS=$(curl -s https://api.wordpress.org/secret-key/1.1/salt/)
          SALTS=$(echo "$SALTS" | sed -e "s/'//g" -e 's/"//g' -e 's/\$/\\$/g')
          
          # Replace salts in config 
          sed -i "/define('AUTH_KEY/,/define('NONCE_SALT/d" /var/www/html/wp-config.php
          sed -i "/Put your unique phrase here/a\\$SALTS" /var/www/html/wp-config.php
          
          # Restart services
          systemctl restart apache2
          systemctl restart mariadb
        permissions: '0755'
    
    # Run commands on first boot
    runcmd:
      - [ bash, /tmp/wordpress_setup.sh ]
  EOF
}

# Create network config
data "template_file" "network_config" {
  template = file("${path.module}/network_config.cfg")
}

# Create cloud-init disk
resource "libvirt_cloudinit_disk" "commoninit" {
  name           = "commoninit.iso"
  user_data      = data.template_file.user_data.rendered
  network_config = data.template_file.network_config.rendered
  pool           = libvirt_pool.ubuntu.name
}

# Create the virtual machine
resource "libvirt_domain" "domain-ubuntu" {
  name   = "wordpress-server"
  memory = "2048"
  vcpu   = 2

  cloudinit = libvirt_cloudinit_disk.commoninit.id

  network_interface {
    network_name = "default"
    wait_for_lease = true
  }

  console {
    type        = "pty"
    target_port = "0"
    target_type = "serial"
  }

  console {
    type        = "pty"
    target_type = "virtio"
    target_port = "1"
  }

  disk {
    volume_id = libvirt_volume.ubuntu-qcow2-now.id
  }

  graphics {
    type        = "spice"
    listen_type = "address"
    autoport    = true
  }
}

# Output the IP address
output "wordpress_server_ip" {
  value = libvirt_domain.domain-ubuntu.network_interface.0.addresses.0
  description = "The IP address of the WordPress server"
}